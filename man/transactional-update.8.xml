<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
                   "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<!--  \-*\- nroff \-*\- -->
<!--  Copyright 2016, 2017 Thorsten Kukuk &lt;kukuk@suse.de&gt; -->

<!--  This file is part of transactional\-update. -->

<!--  This program is free software; you can redistribute it and/or -->
<!--  modify it under the terms of the GNU General Public License as -->
<!--  published by the Free Software Foundation; either version 2 of the -->
<!--  License, or (at your option) any later version. -->

<!--  This program is distributed in the hope that it will be useful, -->
<!--  but WITHOUT ANY WARRANTY; without even the implied warranty of -->
<!--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU -->
<!--  General Public License for more details. -->

<!--  You should have received a copy of the GNU General Public -->
<!--  License along with This program see the file COPYING.  If not, -->
<!--  write to the Free Software Foundation, Inc., 51 Franklin Street \- Suite 500, -->
<!--  Boston, MA 02111\-1307, USA. -->

<refentry id='transactional-update.8'>
  <refentryinfo>
    <title>transactional-update</title>
    <productname>transactional-update</productname>

    <authorgroup>
      <author>
        <contrib></contrib>
        <firstname>Thorsten</firstname>
        <surname>Kukuk</surname>
        <email>kukuk@suse.com</email>
      </author>
    </authorgroup>
  </refentryinfo>

  <refmeta>
    <refentrytitle>transactional-update</refentrytitle>
    <manvolnum>8</manvolnum>
    <refmiscinfo class='setdesc'>transactional-update</refmiscinfo>
  </refmeta>

  <refnamediv id='name'>
    <refname>transactional-update</refname>
    <refname>transactional-update.service</refname>
    <refname>transactional-update.timer</refname>
    <refpurpose>Apply updates to the system in an atomic way via transactional
    updates.</refpurpose>
  </refnamediv>

<!-- body begins here -->
  <refsynopsisdiv id='synopsis'>
    <cmdsynopsis>
      <command>transactional-update</command>
      <arg choice='opt' rep='repeat'><replaceable>options</replaceable></arg>
      <arg choice='opt' rep='repeat'><replaceable>general-command</replaceable></arg>
      <arg choice='opt'><replaceable>package-command</replaceable>
        <arg choice='opt' rep='repeat'><replaceable>command-argument</replaceable></arg>
      </arg>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>transactional-update</command>
      <arg choice='opt' rep='repeat'><replaceable>options</replaceable></arg>
      <arg choice='plain'><replaceable>standalone-command</replaceable></arg>
    </cmdsynopsis>
    <para><filename>transactional-update.service</filename></para>
    <para><filename>transactional-update.timer</filename></para>
  </refsynopsisdiv>

<refsect1 id='description'><title>DESCRIPTION</title>
<para><command>transactional-update</command> updates the system
in a transactional way, which means: it is atomic, so either the patches are
fully applied or nothing is changed. The update does not influence your
running system and it can be rolled back. To activate the changes, the system
needs to be rebooted.
</para>
<para>
To achieve this <command>transactional-update</command> is using Btrfs'
snapshot mechanism.
Before modifying any files - similar to
<citerefentry project='snapper'><refentrytitle>snapper-zypp-plugin</refentrytitle><manvolnum>8</manvolnum></citerefentry>
- a pair of pre / post snapshots of the current system is created using
<citerefentry project='snapper'><refentrytitle>snapper</refentrytitle><manvolnum>8</manvolnum></citerefentry>.
The "pre" snapshot will back up the current state of the system before the
update and will not be modified any further, while the "post" snapshot will be
used to perform the update.
</para>
<para>
If no errors occured the "post" snapshot will be set as the new default
snapshot. In case of errors both snapshots will be deleted again.
</para>
<para>
On a <emphasis>read-only system</emphasis> the contents of the
<filename class='directory'>/etc</filename> overlay file system will be
synchronized into both snapshots; packages will thus be able to modify the
production configuration files (e.g. via fillup-templates). Due to the
read-only file system the only difference between the "pre" snapshot and the
snapshot of the currently running system will be the contents of the
<filename class='directory'>/etc</filename> directory. On reboot all files
of the <filename class='directory'>/etc</filename> overlay will be purged
(except if modified after snapshot creation), as those files are part of the
snapshot's lower layer now.
</para>
<warning>
<para>
The following situations currently cannot be detected reliably when clearing
the /etc overlay:
<itemizedlist>
<listitem>
<para>
If a file or directory has been created since the last reboot and is then
removed or renamed <emphasis>after</emphasis> taking the snapshot, the
file / directory may reappear after reboot and has to be deleted again.
</para>
</listitem>
</itemizedlist>
</para>
</warning>
<para>
Note that on a <emphasis>read-write system</emphasis> all changes made to the
running root filesystem after snapshot creation are lost after the next
reboot. For this reason, after an successfull update, the system should be
rebooted as fast as possible.
</para>
<para>For easier maintenance of big clusters,
<command>transactional-update</command> is run by
<citerefentry project='systemd'><refentrytitle>systemd.timer</refentrytitle><manvolnum>5</manvolnum></citerefentry>
in regular intervals. The specific time can be configured in
<filename>/etc/systemd/system/transactional-update.timer.d/local.conf</filename>. See
<citerefentry project='systemd'><refentrytitle>systemd.unit</refentrytitle><manvolnum>5</manvolnum></citerefentry>
for more information.
</para>
</refsect1>

<refsect1 id='commands'><title>COMMANDS</title>
<refsect2 id='general_commands'><title>General Commands</title>
<para>
  General Commands can be used together in any combination; additionally they
  can be extended with one <link linkend='pkg_commands'>Package Command</link>.
</para>
<variablelist remap='TP'>
  <varlistentry>
    <term><option>cleanup</option></term>
    <listitem>
      <para>If the current root filesystem is identical to the active root
      filesystem (means after a reboot, before
      <command>transactional-update</command> creates a new snapshot with
      updates), all old snapshots without a cleanup algorithm get a cleanup
      algorithm set. This is to make sure, that old snapshots will be deleted
      by snapper. See the section about cleanup algorithms in
      <citerefentry project='snapper'><refentrytitle>snapper</refentrytitle><manvolnum>8</manvolnum></citerefentry>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>grub.cfg</option></term>
    <listitem>
      <para>
	<citerefentry
	    project='linux.org'><refentrytitle>grub2-mkconfig</refentrytitle><manvolnum>8</manvolnum></citerefentry>
	is called to create a new <filename>/boot/grub2/grub.cfg</filename>
	configuration file for the bootloader.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>bootloader</option></term>
    <listitem>
      <para>
	Same as <option>grub.cfg</option>, but will also rewrite the bootloader itself.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>initrd</option></term>
    <listitem>
      <para>
	A new initrd is created in a snapshot.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>kdump</option></term>
    <listitem>
      <para>
	A new initrd for kdump is created in a snapshot.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>reboot</option></term>
    <listitem>
      <para>
	If a new snapshot with updates was created, the system should be
	rebooted. This option will trigger the necessary reboot. If the
	<citerefentry><refentrytitle>rebootmgrd</refentrytitle><manvolnum>8</manvolnum></citerefentry>
	is running, <command>transactional-update</command> will tell the
	daemon to reboot the system according to the configured policies. Else
	<command>systemctl reboot</command> is called.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>shell</option></term>
    <listitem>
      <para>
	After all actions are done, before the snapshot with the changes is
	unmounted and switched to read-only, a shell is started in the new
	snapshot as chroot environment for testing and debugging.
      </para>
    </listitem>
  </varlistentry>
</variablelist>
</refsect2>
<refsect2 id='pkg_commands'><title>Package Commands</title>
<para>
  Package Commands will typically invoke <command>zypper</command> to perform
  actions on the RPM packages. Only one Package Command can be used at the
  same time. Can be combined with any number of
  <link linkend='general_commands'>General Commands</link>.
</para>
<para>
  By default <command>zypper</command> will be called non-interactively, so in
  case of questions the default answer will be assumed. It is possible to
  change this behavior using the <option>--interactive</option> option, e.g.
  to resolve conflicts manually.
  Note that when combining Package Commands in non-interactive mode with
  <link linkend='general_commands'>General Commands</link> those will only be
  executed if the Package Command updated any packages.
</para>
<variablelist>
  <varlistentry>
    <term><option>dup</option></term>
    <listitem>
      <para>
	If new updates are available, a new snapshot is created and
	<command>zypper dup --no-allow-vendor-change</command> is used to
	update the snapshot. Afterwards, the snapshot is activated and will be
	used as the new root filesystem during next boot.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>up</option></term>
    <listitem>
      <para>
	If new updates are available, a new snapshot is created and
	<command>zypper up</command> is used to update the snapshot.
	Afterwards, the snapshot is activated and will be used as the new root
	filesystem during next boot.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>patch</option></term>
    <listitem>
      <para>
	If new updates are available, a new snapshot is created and
	<command>zypper patch</command> is used to update the snapshot.
	Afterwards, the snapshot is activated and will be used as the new root
	filesystem during next boot.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>migration</option></term>
    <listitem>
      <para>
	On systems which are registered against the SUSE Customer Center (SCC)
	or SMT, a migration to a new version of the installed products can be
	made with this option. This is done in an interactive mode.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>pkg install</option> <replaceable>&lt;RPM&gt; ... &lt;RPM&gt;</replaceable></term>
    <listitem>
      <para>
	A PTF or other packages in RPM format can be installed in the system.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>pkg remove</option> <replaceable>&lt;RPM&gt; ... &lt;RPM&gt;</replaceable></term>
    <listitem>
      <para>
	A PTF or other installed packages in RPM format can be removed from
	the system.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>pkg update</option> <replaceable>&lt;RPM&gt; ... &lt;RPM&gt;</replaceable></term>
    <listitem>
      <para>
	Packages installed as RPMs can be updated.
      </para>
    </listitem>
  </varlistentry>
</variablelist>
</refsect2>
<refsect2 id='standalone_commands'><title>Standalone Commands</title>
<variablelist>
  <varlistentry>
    <term><option>rollback</option>
    <optional><replaceable>number</replaceable></optional></term>
    <listitem>
      <para>
	Sets the default root file system. On a read-only system the root
	file system is set directly using <command>btrfs</command>. On
	read-write systems
	<citerefentry
	    project='snapper'><refentrytitle>snapper</refentrytitle><manvolnum>8</manvolnum></citerefentry>
	<option>rollback</option> is called. If no snapshot number is given
	the current root file system is made the new default root file system.
	Otherwise the snapshot with <option>number</option> is made the
	new default root filesystem.
      </para>
    </listitem>
  </varlistentry>
</variablelist>
</refsect2>
</refsect1>
<refsect1 id='options'><title>OPTIONS</title>
<variablelist>
  <varlistentry>
    <term><option>--interactive</option> / <option>-i</option></term>
    <listitem>
      <para>
        Call zypper in interactive mode instead of assuming the default answers.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>--no-selfupdate</option></term>
    <listitem>
      <para>Skip checking for newer transactional-update versions.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>--quiet</option></term>
    <listitem>
      <para>Don't print warnings and informational messages to stdout.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>--help</option></term>
    <listitem>
      <para>Display help and exit</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><option>--version</option></term>
    <listitem>
      <para>Output version information and exit</para>
    </listitem>
  </varlistentry>
</variablelist>
</refsect1>

<refsect1 id='important'><title>IMPORTANT</title>
<para>
  Only RPMs which are fully part of the root filesystem and
  <filename class='directory'>/etc</filename> can be updated. There is also
  limited handling for adding files and directories to
  <filename class='directory'>/var</filename>, however modifications of
  existing files (e.g. migrating databases) are supposed to be handled by
  systemd jobs at startup (see the
  <ulink url="https://en.opensuse.org/openSUSE:Packaging_guidelines#systemd_services_.28as_a_sample_see_mariadb_package.29">initial
  configuration and deployment section of the packaging guidelines</ulink>).
</para>
<para>
  Since all changes to the root filesystem will get lost after creating the
  snapshot for the update, the system should be rebooted as fast as possible
  after the update finished.
</para>
<para>
  Every time <command>transactional-update</command> will create a new
  snapshot it will be based on the <emphasis>currently running
  system</emphasis>.
  Calling <command>transactional-update</command> multiple times without
  rebooting will <emphasis>not</emphasis> include the changes of the previous
  snapshot, thus effectively discarding all previous changes.
</para>
</refsect1>

<refsect1 id='see_also'><title>SEE ALSO</title>
<para><citerefentry><refentrytitle>transactional-update.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry>,
<citerefentry project='systemd'><refentrytitle>systemd.timer</refentrytitle><manvolnum>5</manvolnum></citerefentry>,
<citerefentry project='systemd'><refentrytitle>systemd.time</refentrytitle><manvolnum>7</manvolnum></citerefentry></para>
</refsect1>
</refentry>
